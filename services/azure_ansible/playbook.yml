---
- hosts: localhost
  connection: local
# used for sudo, requires more work
#   become: yes
  roles:
    - azure

  tasks:
    - name: Create resource group if doesn't exist
      azure_rm_resourcegroup:
        name: "{{ resource_group }}"
        location: "{{ resource_location }}"

    - name: Create virtual network
      azure_rm_virtualnetwork:
        resource_group: "{{ resource_group }}"
        name: "{{ virtual_network_name }}"
        location: "{{ virtual_network_location }}"
        address_prefixes: "{{ address_prefixes_cidr }}"

    - name: Add subnet + associate with VNet
      azure_rm_subnet:
        resource_group: "{{ resource_group }}"
        name: "{{ subnet_name }}"
        address_prefix: "{{ address_prefixes_cidr }}"
        virtual_network: "{{ virtual_network_name }}"

    - name: Create public IP address
      azure_rm_publicipaddress:
        resource_group: "{{ resource_group }}"
        location: "{{ resource_location }}"
        allocation_method: "{{ alloc_method }}"
        name: "{{ ip_name }}"
        domain_name: "{{ dom_name }}"
        sku: "{{ ip_sku }}"

    - name: Create Data Disk
      azure_rm_manageddisk:
        name: "{{ data_disk }}"
        location: "{{ resource_location }}"
        resource_group: "{{ resource_group }}"
        create_option: "{{ disk_create_option }}"
        disk_size_gb: 10
        storage_account_type: "{{ storage_type }}"

    - name: Create Network Security Group
      azure_rm_securitygroup:
        resource_group: "{{ resource_group }}"
        name: "{{ security_group }}"
        location: "{{ virtual_network_location }}"
        purge_rules: "{{ enable_no }}"
        purge_default_rules: "{{ enable_no }}"
        rules:
          - name: AllowSSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 300
            destination_address_prefix: "*"
            source_address_prefix: "*"
            direction: Inbound
          - name: 'Allow5500'
            protocol: "*"
            destination_address_prefix: "*"
            source_address_prefix: "*"
            destination_port_range:
              - 5500
              - 9115
              - 8000
              - 8123
            access: Allow
            priority: 310
            direction: Inbound
          - name: 'AllowMultiplePorts'
            protocol: Tcp
            destination_port_range:
              - 80
              - 443
            access: Allow
            priority: 320
            direction: Inbound

    - name: Create virtual network inteface cards, connection others as well
      azure_rm_networkinterface:
        resource_group: "{{ resource_group }}"
        name: "{{ network_interface_name }}"
        virtual_network: "{{ virtual_network_name }}"
        subnet: "{{ subnet_name }}"
        security_group: "{{ security_group }}"

    - name: Create main Storage Account for Blobs
      azure_rm_storageaccount:
        resource_group: "{{ resource_group }}"
        name: "{{ storage_name }}"
        location: "{{ resource_location }}"
        account_type: "{{ storage_acc_type }}"
        kind: "{{ storage_kind }}"

# Access policies to secrets must be additionally setup in
# azure portal GUI

    - name: Key Vault
      azure_rm_keyvault:
        resource_group: "{{ resource_group }}"
        vault_name: "{{ vault_name }}"
        location: "{{ vault_location }}"
        enabled_for_deployment: "{{ enable_yes }}"
        enable_soft_delete: "{{ enable_yes }}"
        enabled_for_disk_encryption: "{{ enable_yes }}"
        enabled_for_template_deployment: "{{ enable_yes }}"
        sku:
          name: standard

# Add data disk manually from Azure Portal

    - name: Create VM
      azure_rm_virtualmachine:
        resource_group: "{{ resource_group }}"
        location: "{{ resource_location }}"
        name: "{{ source_vm_name }}"
        admin_username: "{{ vm_username }}"
        admin_password: "Password1234!"
        vm_size: "{{ vm_os_size }}"
        public_ip_allocation_method: "{{ alloc_method }}"
        network_interfaces: "{{ network_interface_name }}"
        virtual_network_name: "{{ virtual_network_name }}"
        started: "{{ enable_no }}"
        ssh_public_keys:
          - path: /home/jm/Documents/.ssh/authorized_keys
            key_data: "{{ lookup('file', '/home/jm/Documents/.ssh/public_melive') }}"
        managed_disk_type: "{{ storage_type }}"
        os_disk_caching: ReadWrite
        os_disk_name: "{{ os_disk }}"
        os_disk_size_gb: 30
        os_type: "{{ os_type }}"
        image:
          offer: UbuntuServer
          publisher: Canonical
          sku: 19.10
          version: latest

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: ['apt-transport-https', 'gnupg-agent', 'ca-certificates', 'curl', 'wget', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    - name: Add Git Repo
      apt_repository:
        repo: deb http://ppa.launchpad.net/git-core/ppa/ubuntu eoan main
        state: present

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Nodesource Nodejs apt Key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Add Yarn Key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Add Yarn Repository
      apt_repository:
        repo: deb https://dl.yarnpkg.com/debian/ stable main
        state: present

    - name: Add Nodejs
      apt_repository:
        repo: deb https://deb.nodesource.com/node_13.x eoan main
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Compose
      shell: |
        curl -L https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep "tag_name" | cut -d \" -f4)/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Install required system packages #2
      apt: name={{ item }} state=latest update_cache=yes
      loop: ['git', 'nodejs']

    - name: Run git config
      shell: |
        git config --global credential.helper store
      args:
        executable: /bin/bash

    - name: Clone Django Repo
      git:
        repo: 'https://www.github.com/dmpe/django-wohn'
        dest: /home/ub_django
        check_mode: master

    - name: Run git config
      shell: |
        cd django-wohn
        git remote prune origin
        git fetch origin --prune
      args:
        executable: /bin/bash



