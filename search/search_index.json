{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 This documentation providers a high-level overview of Django-Wohn, aka Melive.xyz, project. Progress so far \u00b6 General \u00b6 Start using milestones based on weeks, here DevOps environment \u00b6 Setup working DevOps working environment On commit, pushed automatically through CI/CD to Docker Registry (DockerHub, now moved to Quay.io ) Project can be build and deployed to VM Write proper API documentation, see issue 75 Speed up on current environment, like here 72 Features \u00b6 Azure Function for fetching forex data (ECB for USD/EUR and CNB for CZK) See its branch -> Integrate into workflow Split Backend from Frontend for simpler maintainance Provide GraphQL API for majority of functions Setup Frontend to talk to Backend GraphQL Website: Login (username and admin) and Logout with Social Media Does not use GraphQL - uses Django templates, etc. Flow 1: User can register and see his admin site/panel Flow 2: User can login and logout Website: Add new blog or news section Website: \"About us\" Site Rendered from readme.md file Website: Fix all issues that inhibit smooth feature-complete as of the last time [ ] Emails: Avoid DJango, but when needed transition to SendGrid's API. Posting a real-estate: DJango Model Inheritance via Abstract Class Rooms, Houses, Apartments [ ] [ ] [ ]","title":"Home"},{"location":"#home","text":"This documentation providers a high-level overview of Django-Wohn, aka Melive.xyz, project.","title":"Home"},{"location":"#progress-so-far","text":"","title":"Progress so far"},{"location":"#general","text":"Start using milestones based on weeks, here","title":"General"},{"location":"#devops-environment","text":"Setup working DevOps working environment On commit, pushed automatically through CI/CD to Docker Registry (DockerHub, now moved to Quay.io ) Project can be build and deployed to VM Write proper API documentation, see issue 75 Speed up on current environment, like here 72","title":"DevOps environment"},{"location":"#features","text":"Azure Function for fetching forex data (ECB for USD/EUR and CNB for CZK) See its branch -> Integrate into workflow Split Backend from Frontend for simpler maintainance Provide GraphQL API for majority of functions Setup Frontend to talk to Backend GraphQL Website: Login (username and admin) and Logout with Social Media Does not use GraphQL - uses Django templates, etc. Flow 1: User can register and see his admin site/panel Flow 2: User can login and logout Website: Add new blog or news section Website: \"About us\" Site Rendered from readme.md file Website: Fix all issues that inhibit smooth feature-complete as of the last time [ ] Emails: Avoid DJango, but when needed transition to SendGrid's API. Posting a real-estate: DJango Model Inheritance via Abstract Class Rooms, Houses, Apartments [ ] [ ] [ ]","title":"Features"},{"location":"architecture/","text":"Development over the time \u00b6 Shows how CI/CD + architecture looked like in the past. CI/CD Pipeline \u00b6 Shows current deployment pipeline, from local changes to building a container on server. App's Class Diagramm \u00b6 Created using https://django-extensions.readthedocs.io/en/latest/graph_models.html . During container runtime, command below is executed \"manually\": python3 manage.py graph_models -a -g -o output/class_diagram.png In order to extract diagram which has been created in the output folder, use: docker cp $( docker images --filter = reference = \"djwohn:latest\" -q ) :/wohn/output ~/ Look for ~/output folder App's High Level Architecture \u00b6","title":"Development over the time"},{"location":"architecture/#development-over-the-time","text":"Shows how CI/CD + architecture looked like in the past.","title":"Development over the time"},{"location":"architecture/#cicd-pipeline","text":"Shows current deployment pipeline, from local changes to building a container on server.","title":"CI/CD Pipeline"},{"location":"architecture/#apps-class-diagramm","text":"Created using https://django-extensions.readthedocs.io/en/latest/graph_models.html . During container runtime, command below is executed \"manually\": python3 manage.py graph_models -a -g -o output/class_diagram.png In order to extract diagram which has been created in the output folder, use: docker cp $( docker images --filter = reference = \"djwohn:latest\" -q ) :/wohn/output ~/ Look for ~/output folder","title":"App's Class Diagramm"},{"location":"architecture/#apps-high-level-architecture","text":"","title":"App's High Level Architecture"},{"location":"development/heroku/","text":"Heroku \u00b6 Heroku requires several files to be in the root of the repository, see https://devcenter.heroku.com/articles/deploying-python Some of the necessary files can be found in the services/heroku/ folder of a dedicated branch. 1. Initial Setup steps \u00b6 If models have changed , following needs to be run first on a LOCAL PC : 1.1 Prepare PostgreSQL database \u00b6 sudo su postgres psql To create our DB, use psql : CREATE DATABASE b40re; CREATE USER jm WITH ENCRYPTED PASSWORD 'yourpass'; GRANT ALL PRIVILEGES ON DATABASE b40re TO jm; 1.2 Collect static files \u00b6 This also acts as a sort of test where you can spot some errors early on. It uploads static and media files directly to the Azure blob container too. python3 manage.py collectstatic 1.2.5 Create Django superuser \u00b6 In Heroku, via their cli: heroku run python3 manage.py createsuperuser --username admin --email ci@se.cz 1.3 Prepare migrations files \u00b6 If previously some deployments to the local PC were executed, then one has to clean & prepare database again. https://stackoverflow.com/a/40790734 Find and delete all migrations folders find -type d -name migrations -prune -exec rm -rf {} \\; Run makemigrations again https://stackoverflow.com/a/50309967 python3 manage.py makemigrations <model> Deploy to local/on remote server python3 manage.py migrate 1.4 Deploy to Heroku \u00b6 Heroku automatically runs collectstatic . git push master heroku 2. Common Heroku issues \u00b6 Kill heroku dyno heroku ps && heroku ps:stop web.1 3. Other notes \u00b6 When you add new css/js files to static folder, it is good idea to still run locally python3 manage.py collectstatic which will overwrite staticfiles folder & which again can be pushed to heroku (unless being ignored by gitignore ).","title":"Heroku"},{"location":"development/heroku/#heroku","text":"Heroku requires several files to be in the root of the repository, see https://devcenter.heroku.com/articles/deploying-python Some of the necessary files can be found in the services/heroku/ folder of a dedicated branch.","title":"Heroku"},{"location":"development/heroku/#1-initial-setup-steps","text":"If models have changed , following needs to be run first on a LOCAL PC :","title":"1. Initial Setup steps"},{"location":"development/heroku/#11-prepare-postgresql-database","text":"sudo su postgres psql To create our DB, use psql : CREATE DATABASE b40re; CREATE USER jm WITH ENCRYPTED PASSWORD 'yourpass'; GRANT ALL PRIVILEGES ON DATABASE b40re TO jm;","title":"1.1 Prepare PostgreSQL database"},{"location":"development/heroku/#12-collect-static-files","text":"This also acts as a sort of test where you can spot some errors early on. It uploads static and media files directly to the Azure blob container too. python3 manage.py collectstatic","title":"1.2 Collect static files"},{"location":"development/heroku/#125-create-django-superuser","text":"In Heroku, via their cli: heroku run python3 manage.py createsuperuser --username admin --email ci@se.cz","title":"1.2.5 Create Django superuser"},{"location":"development/heroku/#13-prepare-migrations-files","text":"If previously some deployments to the local PC were executed, then one has to clean & prepare database again. https://stackoverflow.com/a/40790734 Find and delete all migrations folders find -type d -name migrations -prune -exec rm -rf {} \\; Run makemigrations again https://stackoverflow.com/a/50309967 python3 manage.py makemigrations <model> Deploy to local/on remote server python3 manage.py migrate","title":"1.3 Prepare migrations files"},{"location":"development/heroku/#14-deploy-to-heroku","text":"Heroku automatically runs collectstatic . git push master heroku","title":"1.4 Deploy to Heroku"},{"location":"development/heroku/#2-common-heroku-issues","text":"Kill heroku dyno heroku ps && heroku ps:stop web.1","title":"2. Common Heroku issues"},{"location":"development/heroku/#3-other-notes","text":"When you add new css/js files to static folder, it is good idea to still run locally python3 manage.py collectstatic which will overwrite staticfiles folder & which again can be pushed to heroku (unless being ignored by gitignore ).","title":"3. Other notes"},{"location":"development/bare_metal/local_pc/","text":"Local PC \u00b6 Even though using container based approach for developing and deploying the website, it may be necessary sometimes to test things locally, on your own PC with docker being installed. See https://dmpe.github.io/django-wohn/development/container/container/ for some additional documentation. Setup \u00b6 Install latest docker (compose is not necessary) with PostgreSQL (tested on 11+) Install all required package for backend part of melive.xyz sudo pip3 install -r backend/requirenments.txt Navigate to backend folder and execute python3 manage.py runserver --nostatic --insecure If your browser is complaining about SSL issues, follow this answer for fixing it.","title":"Local PC"},{"location":"development/bare_metal/local_pc/#local-pc","text":"Even though using container based approach for developing and deploying the website, it may be necessary sometimes to test things locally, on your own PC with docker being installed. See https://dmpe.github.io/django-wohn/development/container/container/ for some additional documentation.","title":"Local PC"},{"location":"development/bare_metal/local_pc/#setup","text":"Install latest docker (compose is not necessary) with PostgreSQL (tested on 11+) Install all required package for backend part of melive.xyz sudo pip3 install -r backend/requirenments.txt Navigate to backend folder and execute python3 manage.py runserver --nostatic --insecure If your browser is complaining about SSL issues, follow this answer for fixing it.","title":"Setup"},{"location":"development/bare_metal/own_server/","text":"Own Server \u00b6 Before I have switched to container based, CI/CD workflow, I have installed everything that I needed on my server myself... Some important components are located in services/own_server in a different branch. See heroku page as well. To install pgadmin4, follow https://www.pgadmin.org/docs/pgadmin4/4.x/server_deployment.html guideline. 1. Deploy to own server \u00b6 Create Django superuser \u00b6 python3 manage.py createsuperuser --username admin --email ci@se.cz Then, execute on remote server following commands whenever Django model(s) change. python3 manage.py makemigrations <model> && python3 manage.py migrate && sudo systemctl restart gunicorn.service After git commit & push to the server, you can also use a special post-receive hook https://gist.github.com/lemiorhan/8912188 . Setup Git Repo with post-receive hook \u00b6 At certain point of time, the goal was to use AWS Cloud9 IDE to edit and push -- on the same server (username@domain:/home/username/domain_push.git) -- to the git repository, from which website was \"deployment\" (aka gunicorn restarted). Today, this is totally obsolete with VS Code (remote development or Eclipse Che) for instance. See this guide https://stackoverflow.com/a/40479963 E.g. for AWS Cloud9 IDE, first clone git repo somewhere Then create a new bare repo which is used for pushing to it and then you will need to add/register aforementioned post-recieve hook. 2. Some common issues \u00b6 Start Django manually python3 manage.py runserver --nostatic Adding new SSL certificates via certbot (letsencrypt) sudo certbot --nginx certonly Nginx 502 gateway issue after VM reboot Just restart nginx, then sudo systemctl restart gunicorn.service as well as stop that socket thing 3. Run Celery and RabbitMQ Management UI \u00b6 (This could have been moved to Azure Functions for example - see different branch.) Source: https://stackoverflow.com/a/12900126/2171456 First install RabbitMQ (message broker), then Celery (worker). sudo rabbitmq-plugins enable rabbitmq_management sudo rabbitmqctl add_user jm password sudo rabbitmqctl set_user_tags jm administrator Run Celery from b40re directory using: sudo systemctl restart rabbitmq<TAB> celery -A vanoce worker -l info Then, in an another bash window, execute commands below so that tasks such as fetching forex/currency data are run immediately. python3 manage.py shell from userMng.third_party_services.celery_tasks import parse_forex_data rst = parse_forex_data.apply ()","title":"Own Server"},{"location":"development/bare_metal/own_server/#own-server","text":"Before I have switched to container based, CI/CD workflow, I have installed everything that I needed on my server myself... Some important components are located in services/own_server in a different branch. See heroku page as well. To install pgadmin4, follow https://www.pgadmin.org/docs/pgadmin4/4.x/server_deployment.html guideline.","title":"Own Server"},{"location":"development/bare_metal/own_server/#1-deploy-to-own-server","text":"","title":"1. Deploy to own server"},{"location":"development/bare_metal/own_server/#create-django-superuser","text":"python3 manage.py createsuperuser --username admin --email ci@se.cz Then, execute on remote server following commands whenever Django model(s) change. python3 manage.py makemigrations <model> && python3 manage.py migrate && sudo systemctl restart gunicorn.service After git commit & push to the server, you can also use a special post-receive hook https://gist.github.com/lemiorhan/8912188 .","title":"Create Django superuser"},{"location":"development/bare_metal/own_server/#setup-git-repo-with-post-receive-hook","text":"At certain point of time, the goal was to use AWS Cloud9 IDE to edit and push -- on the same server (username@domain:/home/username/domain_push.git) -- to the git repository, from which website was \"deployment\" (aka gunicorn restarted). Today, this is totally obsolete with VS Code (remote development or Eclipse Che) for instance. See this guide https://stackoverflow.com/a/40479963 E.g. for AWS Cloud9 IDE, first clone git repo somewhere Then create a new bare repo which is used for pushing to it and then you will need to add/register aforementioned post-recieve hook.","title":"Setup Git Repo with post-receive hook"},{"location":"development/bare_metal/own_server/#2-some-common-issues","text":"Start Django manually python3 manage.py runserver --nostatic Adding new SSL certificates via certbot (letsencrypt) sudo certbot --nginx certonly Nginx 502 gateway issue after VM reboot Just restart nginx, then sudo systemctl restart gunicorn.service as well as stop that socket thing","title":"2. Some common issues"},{"location":"development/bare_metal/own_server/#3-run-celery-and-rabbitmq-management-ui","text":"(This could have been moved to Azure Functions for example - see different branch.) Source: https://stackoverflow.com/a/12900126/2171456 First install RabbitMQ (message broker), then Celery (worker). sudo rabbitmq-plugins enable rabbitmq_management sudo rabbitmqctl add_user jm password sudo rabbitmqctl set_user_tags jm administrator Run Celery from b40re directory using: sudo systemctl restart rabbitmq<TAB> celery -A vanoce worker -l info Then, in an another bash window, execute commands below so that tasks such as fetching forex/currency data are run immediately. python3 manage.py shell from userMng.third_party_services.celery_tasks import parse_forex_data rst = parse_forex_data.apply ()","title":"3. Run Celery and RabbitMQ Management UI"},{"location":"development/container/container/","text":"Container \u00b6 Docker containers are currently used for building images and starting them with docker-compose. This project has been in \"migration state\" quite a lot of times and currently it represents most up-to-date architecture. Images are run on Azure cloud and therefore Melive.xyz also uses many of its services, for example: In use \u00b6 Azure Virtual Machines Azure KeyVault Azure Blob Storage Not used anymore \u00b6 Azure DNS Zone due to its limitations -> Moved to 3 rd Party Hosting Provider (OVH) 1. Prepare your VM \u00b6 On (close to any) cloud provider, create a VM and use cloud-init cloud-init commands to install required applications right during the initial setup. This should already include major components like Docker daemon. #include https://get.docker.com package_update: true package_upgrade: true packages: - git - curl - python3-pip runcmd: - curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - - apt install -y nodejs - curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list - apt update - apt install -y yarn - [ sh, -c, 'sudo curl -L https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep \"tag_name\" | cut -d \\\" -f4)/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose' ] - [ sh, -c, 'sudo chmod +x /usr/local/bin/docker-compose' ] final_message: \"The system is finally up, after $UPTIME seconds\" 2. New docker volume for each container \u00b6 Once installed, you need to have persistent volumes for images on a separate hard disk - in case your VM crashes, or you need to change VM's OS hard disk. The command below already assumes that a data disk has been mounted & properly setup in VM. docker volume create --driver local --opt type = none --opt device = /datadrive/_name_of_container --opt o = bind datadrive_name_of_container 3. Launch docker containers \u00b6 Clone this repo and cd' into it git clone https://github.com/dmpe/django-wohn . cd django-wohn git switch server-config git status Start docker-compose -f docker-compose.yaml up (-d) Docker Compose with Django and Postgres \u00b6 An important configuration step is to make sure that Django application has in 'DATABASES' property correct host name. This must be equal to the docker-compose one. 4. Test your Django-Wohn images locally \u00b6 During development phase, you may encounter that your image does not work properly on the server VM/container. For example, it does not start or you need to test something locally. DockerHub \u00b6 Once the image has been pushed to DockerHub, download it on your server VM/PC and from there execute: docker run -it f789gh/django-wohn:latest Or wait until watchtower container will download latest version by itself. Quay \u00b6 When using https://quay.io/user/dmpe , you may need to login first docker login https://quay.io docker pull quay.io/dmpe/django-wohn-backend docker pull quay.io/dmpe/django-wohn-frontend docker run -it quay.io/dmpe/django-wohn-backend:latest 5. Export and Import all important data \u00b6 Withing running container, you can execute python3 manage.py dumpdata core --all --indent 2 -o data.json to dump all data from core module. Use then docker cp to copy files into your host system.","title":"Container"},{"location":"development/container/container/#container","text":"Docker containers are currently used for building images and starting them with docker-compose. This project has been in \"migration state\" quite a lot of times and currently it represents most up-to-date architecture. Images are run on Azure cloud and therefore Melive.xyz also uses many of its services, for example:","title":"Container"},{"location":"development/container/container/#in-use","text":"Azure Virtual Machines Azure KeyVault Azure Blob Storage","title":"In use"},{"location":"development/container/container/#not-used-anymore","text":"Azure DNS Zone due to its limitations -> Moved to 3 rd Party Hosting Provider (OVH)","title":"Not used anymore"},{"location":"development/container/container/#1-prepare-your-vm","text":"On (close to any) cloud provider, create a VM and use cloud-init cloud-init commands to install required applications right during the initial setup. This should already include major components like Docker daemon. #include https://get.docker.com package_update: true package_upgrade: true packages: - git - curl - python3-pip runcmd: - curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - - apt install -y nodejs - curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list - apt update - apt install -y yarn - [ sh, -c, 'sudo curl -L https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep \"tag_name\" | cut -d \\\" -f4)/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose' ] - [ sh, -c, 'sudo chmod +x /usr/local/bin/docker-compose' ] final_message: \"The system is finally up, after $UPTIME seconds\"","title":"1. Prepare your VM"},{"location":"development/container/container/#2-new-docker-volume-for-each-container","text":"Once installed, you need to have persistent volumes for images on a separate hard disk - in case your VM crashes, or you need to change VM's OS hard disk. The command below already assumes that a data disk has been mounted & properly setup in VM. docker volume create --driver local --opt type = none --opt device = /datadrive/_name_of_container --opt o = bind datadrive_name_of_container","title":"2. New docker volume for each container"},{"location":"development/container/container/#3-launch-docker-containers","text":"Clone this repo and cd' into it git clone https://github.com/dmpe/django-wohn . cd django-wohn git switch server-config git status Start docker-compose -f docker-compose.yaml up (-d)","title":"3. Launch docker containers"},{"location":"development/container/container/#docker-compose-with-django-and-postgres","text":"An important configuration step is to make sure that Django application has in 'DATABASES' property correct host name. This must be equal to the docker-compose one.","title":"Docker Compose with Django and Postgres"},{"location":"development/container/container/#4-test-your-django-wohn-images-locally","text":"During development phase, you may encounter that your image does not work properly on the server VM/container. For example, it does not start or you need to test something locally.","title":"4. Test your Django-Wohn images locally"},{"location":"development/container/container/#dockerhub","text":"Once the image has been pushed to DockerHub, download it on your server VM/PC and from there execute: docker run -it f789gh/django-wohn:latest Or wait until watchtower container will download latest version by itself.","title":"DockerHub"},{"location":"development/container/container/#quay","text":"When using https://quay.io/user/dmpe , you may need to login first docker login https://quay.io docker pull quay.io/dmpe/django-wohn-backend docker pull quay.io/dmpe/django-wohn-frontend docker run -it quay.io/dmpe/django-wohn-backend:latest","title":"Quay"},{"location":"development/container/container/#5-export-and-import-all-important-data","text":"Withing running container, you can execute python3 manage.py dumpdata core --all --indent 2 -o data.json to dump all data from core module. Use then docker cp to copy files into your host system.","title":"5. Export and Import all important data"},{"location":"development/container/Azure Cloud/CICD/","text":"CI & CD jobs \u00b6 The pipeline jobs run on Azure DevOps Common errors \u00b6 Issue: In Azure Portal, you suddenly cannot add new secrets. You get error message about \"list access rights\". Solution: Delete all access rights and re-add them manually. Issue: Azure DevOps cannot access Azure Key Vault Solution: Go to Azure Key Vault, and look for \"johnmalc-Django\" app manually. Their listing is buggy and does not show every accessible user.","title":"CI & CD jobs"},{"location":"development/container/Azure Cloud/CICD/#ci-cd-jobs","text":"The pipeline jobs run on Azure DevOps","title":"CI &amp; CD jobs"},{"location":"development/container/Azure Cloud/CICD/#common-errors","text":"Issue: In Azure Portal, you suddenly cannot add new secrets. You get error message about \"list access rights\". Solution: Delete all access rights and re-add them manually. Issue: Azure DevOps cannot access Azure Key Vault Solution: Go to Azure Key Vault, and look for \"johnmalc-Django\" app manually. Their listing is buggy and does not show every accessible user.","title":"Common errors"},{"location":"development/container/Azure Cloud/functions/","text":"Azure Functions \u00b6 We used Azure Functions to react or trigger events (functions) for some tasks, namely: Getting forex exchange data from (central) banks and storing them in the database. When creating real estate posting, user can send pictures via email (instead of uploading them). See GitHub issue for more ideas. Consumption plan should be enough. Though a premium plan, which enables to use full docker images, can be better due to large Python3 dependencies. Our Branch \u00b6 The branch with Azure functions: azure-functions , see link here . Build \u00b6 Sources: https://docs.microsoft.com/de-de/azure/azure-functions/functions-reference-python https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-function-linux-custom-image https://amaral.northwestern.edu/resources/guides/pyenv-tutorial 1. Pyenv \u00b6 Use pyenv in this worktree. Execute in the root: Be careful on using VSCode with Python/\"Live autocompl.\" plugins as VSCode will inevitably crash. git switch azure-functions pyenv install 3 .6.9 # Azure is currently compatible only with Python 3.6 pyenv local 3 .6.9 2. Start Docker and Build Dockerfile \u00b6 sudo systemctl start docker func azure functionapp publish django-wohn --build-native-deps","title":"Azure Functions"},{"location":"development/container/Azure Cloud/functions/#azure-functions","text":"We used Azure Functions to react or trigger events (functions) for some tasks, namely: Getting forex exchange data from (central) banks and storing them in the database. When creating real estate posting, user can send pictures via email (instead of uploading them). See GitHub issue for more ideas. Consumption plan should be enough. Though a premium plan, which enables to use full docker images, can be better due to large Python3 dependencies.","title":"Azure Functions"},{"location":"development/container/Azure Cloud/functions/#our-branch","text":"The branch with Azure functions: azure-functions , see link here .","title":"Our Branch"},{"location":"development/container/Azure Cloud/functions/#build","text":"Sources: https://docs.microsoft.com/de-de/azure/azure-functions/functions-reference-python https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-function-linux-custom-image https://amaral.northwestern.edu/resources/guides/pyenv-tutorial","title":"Build"},{"location":"development/container/Azure Cloud/functions/#1-pyenv","text":"Use pyenv in this worktree. Execute in the root: Be careful on using VSCode with Python/\"Live autocompl.\" plugins as VSCode will inevitably crash. git switch azure-functions pyenv install 3 .6.9 # Azure is currently compatible only with Python 3.6 pyenv local 3 .6.9","title":"1. Pyenv"},{"location":"development/container/Azure Cloud/functions/#2-start-docker-and-build-dockerfile","text":"sudo systemctl start docker func azure functionapp publish django-wohn --build-native-deps","title":"2. Start Docker and Build Dockerfile"}]}