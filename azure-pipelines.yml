# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  quayId: dmpe
  dockerId: f789gh
  imageName: django-wohn
  imageNameB: django-wohn-backend
  imageNameF: django-wohn-frontend
  updateToBackend: false
  updateToFrontend: false
  major: 1
  minor: $[counter(variables['major'], 3)]

# test all commits in Pull Re. which target master
trigger:
- master
- pr

stages:
- stage: Preparations
  displayName: Prepare all the tasks that are needed for later use
  jobs:
    - job: BuildJob
      strategy:
        parallel: 2
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: Docker@2
        displayName: "Docker login"
        inputs:
          containerRegistry: 'docker_hub'
          command: 'login'

      - task: Docker@2
        displayName: "quay login"
        inputs:
          containerRegistry: 'quay.io'
          command: 'login'

      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 'DjangoAzure'
          KeyVaultName: 'b40'
          SecretsFilter: '*'
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV1/README.md


- stage: DockerBuild
  displayName: Build Docker images
  jobs:
    - job: BuildJobBackend
      # strategy:
      #   parallel: 2
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              $editedFiles = git diff HEAD HEAD~ --name-only
              $editedFiles | ForEach-Object {
                  Switch -Wildcard ($_ ) {
                    'backend/*' { Write-Output "##vso[task.setvariable variable=updateToBackend]True" }
                    'frontend/*' { Write-Output "##vso[task.setvariable variable=updateToFrontend]True" }
                  }
              }
        - task: Docker@2
          displayName: "Build our Backend now"
          condition: and(succeeded(), eq(variables['updateToBackend'], 'True'))
          inputs:
            containerRegistry: 'quay.io'
            repository: $(quayId)/$(imageNameB)
            command: 'build'
            Dockerfile: 'backend/Dockerfile'
            tags: |
              $(major).$(minor)
              latest

        - task: Docker@2
          displayName: "Push to Docker Hub"
          # only push on master branch, i.e. when PR is merged
          # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          condition: and(succeeded(), eq(variables['updateToBackend'], 'True'))
          inputs:
            containerRegistry: 'quay.io'
            repository: '$(quayId)/$(imageNameB)'
            command: 'push'
            tags: |
              $(major).$(minor)
              latest

        - task: Docker@2
          displayName: "Build our Frontend now"
          condition: and(succeeded(), eq(variables['updateToFrontend'], 'True'))
          inputs:
            containerRegistry: 'quay.io'
            repository: $(quayId)/$(imageNameF)
            command: 'build'
            Dockerfile: 'frontend/Dockerfile'
            tags: |
              $(major).$(minor)
              latest

        - task: Docker@2
          displayName: "Push Frontend to Hub"
          # only push on master branch, i.e. when PR is merged
          # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          condition: and(succeeded(), eq(variables['updateToFrontend'], 'True'))
          inputs:
            containerRegistry: 'quay.io'
            repository: '$(quayId)/$(imageNameF)'
            command: 'push'
            tags: |
              $(major).$(minor)
              latest

- stage: SendToSonarQube
  displayName: Run SonarQube scannerMode
  jobs:
    - job: ScanJob
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: SonarCloudPrepare@1
        displayName: "Connect to SonarCloud"
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'dmpe-github'
          scannerMode: 'CLI'
          configMode: 'file'

      - task: SonarCloudAnalyze@1

      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
# TODO: take picture from output and commit it to docs directory
